@model KutuphaneMvc1.Models.BildirimVs
@{
    ViewBag.Title = "UserDetail";
    var userId = ViewBag.UserId;
    var userName = ViewBag.UserName;
    var userImage = ViewBag.UserImage;
}
<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Telefon Ekranı Gösterimi</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link href="~/Content/mesajlar.css" rel="stylesheet" />
    <style>
        .custom-header {
            display: flex;
            align-items: center;
            background-color: #4caf50;
            padding: 10px;
            border-radius: 12px 12px 0 0;
            justify-content: center;
        }

        .user-header {
            display: flex;
            align-items: center;
            background-color: #4caf50;
            padding: 10px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header-title {
            color: #fff;
            font-size: 22px;
            font-weight: bold;
        }

        .back-button {
            margin-right: 10px;
            background: none;
            border: none;
            color: #fff;
            font-size: 20px;
            cursor: pointer;
        }

        .chat-user-avatar img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
            border: 2px solid #fff;
        }

        .chat-user-info-header {
            display: flex;
            align-items: center;
        }

        .chat-user-name-header {
            color: #fff;
            font-size: 18px;
            font-weight: bold;
            margin-left: 10px;
        }

        .action-bar {
            background-color: #4caf50;
            padding: 10px 0;
            display: flex;
            justify-content: center;
            margin-bottom: 10px;
        }

            .action-bar .phone-button {
                margin: 0 8px;
            }

        .message-input-container {
            background-color: #f5f5f5;
            padding: 10px;
            display: flex;
            align-items: center;
            border-top: 1px solid #ddd;
        }

        .message-textarea {
            flex: 1;
            border: 1px solid #ddd;
            border-radius: 20px;
            padding: 10px 15px;
            margin-right: 10px;
            resize: none;
            height: 40px;
            max-height: 100px;
            outline: none;
            font-family: inherit;
        }

        .send-button {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: #4caf50;
            color: white;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }

        .messages-container {
            padding: 15px;
            overflow-y: auto;
            height: calc(100% - 220px);
            display: flex;
            flex-direction: column;
        }

        .phone-footer {
            background-color: #f5f5f5;
            padding: 10px;
            display: flex;
            justify-content: space-around;
            border-top: 1px solid #ddd;
            border-radius: 0 0 12px 12px;
        }

        /* Mesaj baloncukları için stiller */
        .message {
            max-width: 80%;
            margin-bottom: 10px;
            padding: 10px 15px;
            border-radius: 18px;
            position: relative;
            word-wrap: break-word;
        }

        .message-time {
            font-size: 11px;
            color: #999;
            text-align: right;
            margin-top: 2px;
        }

        .message-outgoing {
            align-self: flex-end;
            background-color: #dcf8c6;
            border-top-right-radius: 5px;
        }

        .message-incoming {
            align-self: flex-start;
            background-color: #f1f1f1;
            border-top-left-radius: 5px;
        }

        .message-wrapper {
            display: flex;
            flex-direction: column;
            margin-bottom: 5px;
        }

        .loading-dots {
            display: inline-block;
            width: 40px;
            text-align: left;
        }

            .loading-dots span {
                display: inline-block;
                width: 8px;
                height: 8px;
                margin-right: 2px;
                background: #bbb;
                border-radius: 50%;
                animation: loading-bounce 1.4s infinite both;
            }

                .loading-dots span:nth-child(2) {
                    animation-delay: 0.2s;
                }

                .loading-dots span:nth-child(3) {
                    animation-delay: 0.4s;
                }

        @@keyframes loading-bounce {
            0%, 80%, 100% {
                transform: scale(0);
            }

            40% {
                transform: scale(1);
            }
        }
    </style>
</head>
<body>
    <div class="phone-container">
        <div class="phone-volume"></div>
        <div class="phone-power"></div>
        <div class="phone-speaker"></div>
        <div class="phone-notch"></div>
        <div class="phone-screen">
            <div class="custom-header">
                <div class="header-title">Mesajlar</div>
            </div>
            <div class="user-header">
                <button id="chat-back-btn" class="back-button" title="Geri">
                    <i class="fa fa-arrow-left"></i>
                </button>
                <div class="chat-user-info-header">
                    <div class="chat-user-avatar">
                        <img id="chat-user-img" src="@userImage" alt="@userName" />
                    </div>
                    <div id="chat-user-name" class="chat-user-name-header">@userName</div>
                </div>
            </div>
            <!-- Mesajların geleceği alan -->
            <div id="phoneContent" class="messages-container">
                @foreach (var item in Model.Mesajlasmalar)
                {
                    var kullaniciAdi = Session["KullaniciAdi"] as string;
                    bool isOutgoing = item.MesajıAtanınAdı == kullaniciAdi;
                    <div class="message-wrapper">
                        <div class="@(isOutgoing ? "message message-outgoing" : "message message-incoming")">
                            @item.Mesaj
                        </div>
                        <div class="message-time">
                            @item.TarihSaat
                        </div>
                    </div>
                }
            </div>

            <form id="messageForm" method="post" action="@Url.Action("MesajGonder", "Bildirimlervs")" style="display:none;">
                <input type="hidden" name="alici" value="@userId" />
                <input type="hidden" name="aliciadi" value="@userName" />
                <input type="hidden" name="mesajicerik" id="hiddenMessageContent" />
                <input type="hidden" name="gonderenadi" value="@Session["KullaniciAdi"]" />
            </form>

            <div class="message-input-container">
                <textarea id="messageText" class="message-textarea" placeholder="Mesajınızı yazın..."></textarea>
                <button id="sendButton" class="send-button" title="Gönder" type="button">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>

            <div class="phone-footer">
                <button class="phone-button" id="btnRobot" style="background: #a084ee; color: #fff;" title="Robot Mesajı">
                    <span class="fa fa-robot"></span>
                </button>
                <button class="phone-button" id="btnComment" style="background: #4caf50; color: #fff;" title="Kişiler Arası Mesaj">
                    <span class="fa fa-comment-dots"></span>
                </button>
                <button class="phone-button" id="btnBell" style="background: #ff9800; color: #fff;" title="Bildirim Mesajı">
                    <span class="fa fa-bell"></span>
                </button>
            </div>
        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/js/all.min.js" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    @*<script src="your-script.js"></script>*@
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('btnRobot').addEventListener('click', function () {
                window.location.href = '@Url.Action("Index", "Bildirimlervs")';
            });
            document.getElementById('btnBell').addEventListener('click', function () {
                window.location.href = '@Url.Action("Notifications", "Bildirimlervs")';
            });
            document.getElementById('btnComment').addEventListener('click', function () {
                window.location.href = '@Url.Action("Messages", "Bildirimlervs")';
            });
        });
   // Form elementini seç
   const messageForm = document.createElement('form');
   messageForm.method = 'post';
   messageForm.action = '@Url.Action("MesajGonder", "Bildirimlervs")';
   messageForm.style.display = 'none';

   // Gizli input alanları oluştur
   const aliciInput = document.createElement('input');
   aliciInput.type = 'hidden';
   aliciInput.name = 'alici';
   aliciInput.value = '@userId';

   const aliciAdiInput = document.createElement('input');
   aliciAdiInput.type = 'hidden';
   aliciAdiInput.name = 'aliciadi';
   aliciAdiInput.value = '@userName';

   const mesajInput = document.createElement('input');
   mesajInput.type = 'hidden';
   mesajInput.name = 'mesajicerik';
   mesajInput.id = 'dynamicMessageContent'; // ID değiştirildi

   const gonderenInput = document.createElement('input');
   gonderenInput.type = 'hidden';
   gonderenInput.name = 'gonderenadi';
   gonderenInput.value = '@Session["KullaniciAdi"]';

   // Inputları forma ekle
   messageForm.appendChild(aliciInput);
   messageForm.appendChild(aliciAdiInput);
   messageForm.appendChild(mesajInput);
   messageForm.appendChild(gonderenInput);

   // Formu body'e ekle
   document.body.appendChild(messageForm);
    messageForm.addEventListener('submit', function (e) {
        e.preventDefault(); // Sayfanın yenilenmesini engeller

        const formData = new FormData(messageForm);
        fetch(messageForm.action, {
            method: 'POST',
            body: formData
        })
            .then(res => res.text())
            .then(data => {
                console.log("Mesaj gönderildi.");
            });
    });

    // Formu tetikle
    document.body.appendChild(messageForm);

    // 1) submit event’i – fetch ile arka planda gönder
    messageForm.addEventListener('submit', function (e) {
        e.preventDefault();                // sayfa yenilenmesin
        const formData = new FormData(messageForm);
        fetch(messageForm.action, {
            method: 'POST',
            body: formData
        })
            .then(res => res.ok ? console.log('Mesaj gönderildi')
                : console.error('Gönderilemedi'));
    });

    // 2) Mesaj gönderme fonksiyonu
    function sendMessage() {
        const messageInput = document.getElementById('messageText');
        const messageText = messageInput.value.trim();
        if (!messageText) return;

        addMessage(messageText, true);
        messageInput.value = '';

        mesajInput.value = messageText;
        messageForm.requestSubmit();
    }


    // Mesaj ekleme fonksiyonu
    function addMessage(text, isOutgoing = false) {
        const messagesContainer = document.getElementById('phoneContent');
        const messageWrapper = document.createElement('div');
        messageWrapper.className = 'message-wrapper';

        const messageElement = document.createElement('div');
        messageElement.className = isOutgoing ? 'message message-outgoing' : 'message message-incoming';
        messageElement.textContent = text;

        const timeElement = document.createElement('div');
        timeElement.className = 'message-time';

        const now = new Date();
        const hours = now.getHours().toString().padStart(2, '0');
        const minutes = now.getMinutes().toString().padStart(2, '0');
        timeElement.textContent = `${hours}:${minutes}`;

        messageWrapper.appendChild(messageElement);
        messageWrapper.appendChild(timeElement);
        messagesContainer.appendChild(messageWrapper);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    // Geri butonu işlevi
    document.getElementById('chat-back-btn').addEventListener('click', function () {
        window.history.back();
    });

    // Gönder butonu ve Enter tuşu işlevleri
    document.getElementById('sendButton').addEventListener('click', sendMessage);

    document.getElementById('messageText').addEventListener('keypress', function (e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
    </script>
</body>
</html>
